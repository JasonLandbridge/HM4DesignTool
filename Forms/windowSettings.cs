using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using nucs.JsonSettings;
using SettingsNamespace;
using DataNameSpace;

namespace Windows.Forms
{
    public partial class windowSettings : Form
    {
        private windowMain WindowMain;
        private Settings SettingsObject;

        //Patient Type Tab
        private int lastLoadedPatientTypeCategoriesIndex = 0;
        private Dictionary<String, List<String>> patientTypeCategoriesDict = Globals.SettingsObject.GetPatientTypes();  // Room[N] -> List with only checked patientTypes


        public windowSettings(windowMain parentWindow)
        {
            WindowMain = parentWindow;
            SettingsObject = Globals.SettingsObject;
            InitializeComponent();
            this.SetupPatientTypeTab();
            this.restoreSettings();
        }



        private void button1_Click(object sender, EventArgs e)
        {
            string folderPath = "";
            FolderBrowserDialog folderBrowserDialog1 = new FolderBrowserDialog();
            if (folderBrowserDialog1.ShowDialog() == DialogResult.OK)
            {
                folderPath = folderBrowserDialog1.SelectedPath;
                projectDirectoryPathText.Text = folderPath;
            }

        }

        private void saveButton_Click(object sender, EventArgs e)
        {
            this.saveSettings();
            this.Hide();
        }

        private void canelButton_Click(object sender, EventArgs e)
        {
            this.Hide();
        }


        private void saveSettings()
        {

            StorePatientTypeCategory();


            Globals.SettingsObject.projectPathData = projectDirectoryPathText.Text;
            Globals.SettingsObject.SetPatientTypes(patientTypeCategoriesDict);
            Globals.SettingsObject.Save();
        }


        private void restoreSettings()
        {
            projectDirectoryPathText.Text = SettingsObject.projectPathData;


        }


        private void SetupPatientTypeTab()
        {
            //Set categories for the patientTypeRoomList
            patientTypeRoomList.Items.Clear();
            foreach (String roomName in Globals.roomCategories)
            {
                patientTypeRoomList.Items.Add(roomName);
            }

            patientTypeRoomList.SelectedIndex = 0;

            // Update the auto-generated list from "data\images\patients"
            String text = "";
            List<String> PatientTypeList = Globals.DataObject.GetPatientTypesFromDisk();
            foreach (String patientType in PatientTypeList)
            {
                text += patientType + Environment.NewLine;
            }

            patientTypeListAutoGeneratedText.Text = text;


            foreach (String patientType in PatientTypeList)
            {
                if (patientType.Contains("_male"))
                {
                    patientTypeMaleCheckList.Items.Add(patientType, false);
                }
                else if (patientType.Contains("_female"))
                {
                    patientTypeFemaleCheckList.Items.Add(patientType, false);
                }
                else
                {
                    patientTypeOtherCheckList.Items.Add(patientType, false);
                }

            }

        }


        private void StorePatientTypeCategory()
        {
            String categoryKey = patientTypeRoomList.Items[lastLoadedPatientTypeCategoriesIndex].ToString();
            List<String> checkedPatientTypes = new List<String> { };


            foreach(CheckedListBox checkList in new List<CheckedListBox> { patientTypeMaleCheckList, patientTypeFemaleCheckList, patientTypeOtherCheckList })
            {
                foreach (object itemChecked in checkList.CheckedItems)
                {
                    checkedPatientTypes.Add(itemChecked.ToString());
                }

            }

            if (patientTypeCategoriesDict.ContainsKey(categoryKey))
            {
                patientTypeCategoriesDict[categoryKey] = checkedPatientTypes;
            }
            else
            {
                Console.WriteLine("ERROR: windowSettings.StorePatientTypeCategory, patientTypeCategoriesDict does not contain key: " + categoryKey);
            }
        }

        private void LoadPatientTypeCategory()
        {
            String categoryKey = patientTypeRoomList.Items[patientTypeRoomList.SelectedIndex].ToString();
            List<String> patientTypeList = patientTypeCategoriesDict[categoryKey];
            foreach (CheckedListBox checkList in new List<CheckedListBox> { patientTypeMaleCheckList, patientTypeFemaleCheckList, patientTypeOtherCheckList })
            {
                for (int i = 0; i < checkList.Items.Count; i++)
                {
                    //Check if the patientType occurs
                    checkList.SetItemChecked(i, patientTypeList.Contains(checkList.Items[i].ToString()));
                }
            }
            lastLoadedPatientTypeCategoriesIndex = patientTypeRoomList.SelectedIndex;
        }

        private void onPatientTypeCategorySelected(object sender, EventArgs e)
        {
            StorePatientTypeCategory();
            LoadPatientTypeCategory();
        }

    }
}
